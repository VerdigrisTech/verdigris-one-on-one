var names = ['Andrew','Chatty','David','John','Jon'];
//var names = ['Andrew','Chatty','David','John','Jon','Mark','Martin','Patrick','Sue','Thomas','Will'];

function insertTable()
{
    var startHr = document.getElementById('startHour').value;
    var numPeople = document.getElementById('numP').value;
    var theader = "<table id='table1'>";
    var tbody = "";
    var hour = Number(startHr)-1;
    var min =0;
    //var names =['Andrew','Chatty','David','John'];
    //var names = ['Andrew','Chatty','David','John','Jon','Mark','Martin','Patrick','Sue','Thomas','Will'];


    var graph = buildGraph(numPeople);
    var finalResult = major(graph);

    if (names.length === Number(numPeople)){
    //Output names for table heading
        theader += "<th> " +" </th>";
        for(var j = 0; j < numPeople; j++)
        {
          theader += "<th> "+ names[j] +" </th>";
        }


        for(var i = 0; i < numPeople; i++)
        {
            //first column: setting time
            if (i%2 == 0) {
                min = '00';
                hour++;
            } else {
                min = '30';
            }
            tbody += "<tr>";
            tbody += "<td>";
            tbody += hour + ': ' + min;
            tbody += "</td>"

            //filling cells with data
            for(var j = 1; j <= numPeople; j++)
            {
                tbody += "<td>";
                tbody += finalResult[i][1];
                tbody += "</td>"
            }
            tbody += "</tr>";
        }
        var tfooter = "</table>";
        document.getElementById('wrapper').innerHTML = theader + tbody + tfooter;

    } else {
        alert('Entry number of people does not match number of engineers\' names in data. Please update array \'names\' first');
    }
}

function buildGraph (numPeople){
    var vertices =[];
    for (var a = 0; a < numPeople; a++){
        var vertex = buildVertex(names[a],a,numPeople);
        vertices.push(vertex);
    }
    return vertices;
}

function buildVertex (name, index, numPeople){
    var result = {};
    result.id = index;
    result.name = name;
    var neighbors = [];
    for (var b = 0; b < numPeople; b++){
        if (b == index) {
        } else {
            neighbors.push(b);
        }
    }
    result.edges = neighbors;
    return result;
}


//returns true if there's edge left in graph
function edgesLeft(graph){
    for (var c = 0; c < graph.length; c++){
        if (graph[c].edges.length > 0){
            return true;
        }
    }
    return false;
}

function sum_of_array(a) {
    sum = 0;
    for (var i=0; i < a.length; i++) {
        sum += a[i];
    }
    return sum;
}

function V_with_most_neighbor(a, graph) {
    //console.log(a);
    var V = a[0];
    for (var i = 1; i < a.length; i++) {
        if(graph[V].edges.length < graph[a[i]].edges.length) {

            V = a[i];
        }
    }
    // console.log(graph[V].edges);
    return V;
}

function i_seq(n) {
    var a = [];
    for (var i = 0; i < n; i++) {
        a.push(i);
    }
    return a; 
}

function major (graph) {
    var cell = []; 
    var finalResult = [];
    for (var i = 0; i < 4; i++){
        var available = [];
        for (var j = 0; j < graph.length; j++) {
            available.push(1);
        }
        //for (var j = 0; j<2; j++) {
         while (sum_of_array(available) > 1) {
            var result = [];
            var temp1 = V_with_most_neighbor(i_seq(graph.length),graph);
            var firstV = graph[temp1];
            available[temp1] = 0;
            temp2 = V_with_most_neighbor(firstV.edges,graph);
            var secondV = graph[temp2];
            available[temp2] = 0;

            // var firstV = graph[V_with_most_neighbor(i_seq(graph.length),graph)];
            // var secondV = graph[V_with_most_neighbor(firstV.edges,graph)];
            result.push(firstV);
            result.push(secondV);
            cell.push(result);
            //console.log(result);
            var firstRemoveIndex = firstV.edges.indexOf(temp2);
                          //  console.log(firstRemoveIndex);
            if(firstRemoveIndex > -1) {
                firstV.edges.splice(firstRemoveIndex, 1);
            }
            var secondRemoveIndex = secondV.edges.indexOf(temp1); 
            // //console.log(secondV.name);

            if(secondRemoveIndex > -1 ) {       
                secondV.edges.splice(secondRemoveIndex, 1);
            }
            finalResult.push(cell);


         }
        console.log(finalResult);
    }
    return finalResult; 
}